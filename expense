#!/usr/bin/env node

const { Client } = require("pg");
const PROCESS = require("process");
const READLINE = require("readline");

class ExpenseData {
  constructor() {
    this.client = new Client({
      database: "expenses",
      user: "al6207",
      host: "/var/run/postgresql",
      port: 5432
    });
  }

  async listExpenses() {
    await this.client.connect().catch(err => this.logAndExit(err));
    await this.setupSchema().catch(err => this.logAndExit(err));

    let res = await this.client.query(`SELECT * FROM expenses`)
                          .catch(err => this.logAndExit(err));
  
    this.displayCount(res.rowCount);

    if (res.rowCount > 0) {
      this.displayExpenses(res.rows);
      this.displayTotal(res.rows);
    }

    await this.client.end().catch(err => this.logAndExit(err));
  }

  async addExpense(amount, memo) {
    await this.client.connect().catch(err => this.logAndExit(err));
    await this.setupSchema().catch(err => this.logAndExit(err));

    let date = new Date().toLocaleDateString();
    let queryText = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)";
    let queryValues = [amount, memo, date];
    await this.client.query(queryText, queryValues)
                .catch(err => this.logAndExit(err));
  
    await this.client.end().catch(err => this.logAndExit(err));
  }

  async searchExpenses(term) {
    await this.client.connect().catch(err => this.logAndExit(err));
    await this.setupSchema().catch(err => this.logAndExit(err));

    let queryTerm = `%${term}%`;
    let queryText = "SELECT * FROM expenses WHERE memo ILIKE $1";
    let queryValues = [queryTerm];

    let res = await this.client.query(queryText, queryValues)
                                .catch(err => this.logAndExit(err));

    this.displayCount(res.rowCount);
    this.displayExpenses(res.rows);

    if (res.rowCount > 1) {
      this.displayTotal(res.rows);
    }

    await this.client.end().catch(err => this.logAndExit(err));
  }

  async deleteExpense(id) {
    await this.client.connect().catch(err => this.logAndExit(err));
    await this.setupSchema().catch(err => this.logAndExit(err));

    let queryText = "SELECT * FROM expenses WHERE id = $1";
    let res = await this.client.query(queryText, [id]);
    let expenseExists = res.rowCount > 0;

    if (expenseExists) {
      let deleteQuery = "DELETE FROM expenses WHERE id = $1";
      await this.client.query(deleteQuery, [id])
                       .catch(err => this.logAndExit(err));

      console.log("The following expense has been deleted:");
      this.displayExpenses(res.rows);
    } else {
      console.log(`There is no expense with the id '${id}'.`);
    }

    await this.client.end().catch(err => this.logAndExit(err));
  }

  async deleteAllExpenses() {
    await this.client.connect().catch(err => this.logAndExit(err));
    await this.setupSchema().catch(err => this.logAndExit(err));

    let queryText = "DELETE FROM expenses";
    await this.client.query(queryText).catch(err => this.logAndExit(err));
    console.log("All expenses have been deleted");

    await this.client.end().catch(err => this.logAndExit(err));
  }

  async setupSchema() {
    await this.client.connect().catch(err => this.logAndExit(err));

    let tableExistsQuery = `SELECT COUNT(*) FROM information_schema.tables
    WHERE table_schema = 'public' AND table_name = 'expenses'`;
    let res = await this.client.query(tableExistsQuery)
                               .catch(err => this.logAndExit(err));
    let tableExists = res.rows[0].count === "1";

    if (!tableExists) {
      let tableQuery = `CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6, 2),
        memo text,
        created_on date
      )`; 

      await this.client.query(tableQuery).catch(err => this.logAndExit(err));
    }
  }

  displayExpenses(expenses) {
    expenses.forEach(row => {
      let columns = [
        String(row.id).padStart(3),
        row.created_on.toDateString().padStart(10),
        row.amount.padStart(12),
        row.memo
      ];

      console.log(columns.join(" | "));
    });
  }

  displayCount(rowCount) {
    if (rowCount === 0) {
      console.log("There are no expenses.");
    } else {
      console.log(`There ${rowCount === 1 ? 'is' : "are" } ` + 
      `${rowCount} ${rowCount === 1 ? 'expense' : "expenses"}`);
    }
  }

  displayTotal(expenses) {
    let total = expenses.reduce((acc, val) => acc + Number(val.amount), 0);
    
    console.log("-".repeat(50));
    console.log(`Total ${String(total).padStart(30)}`);
  }

  async logAndExit(error) {
    console.log(error)
    PROCESS.exit(1);
  }
}

class CLI {
  constructor() {
    this.application = new ExpenseData();
  }

  static HELP() {
    return "An expense recording system\n\n" +
      "Commands:\n\n" +
      "add AMOUNT MEMO [DATE] - record a new expense\n" +
      "clear - delete all expenses\n" +
      "list - list all expenses\n" +
      "delete NUMBER - remove expense with id NUMBER\n" +
      "search QUERY - list expenses with a matching memo field\n";
  }

  displayHelp() {
    console.log(CLI.HELP());
  }

  run(args) {
    let command = args[2];

    if (command === 'list') {
      this.application.listExpenses();
    } else if (command === "add") {
      let [amount, memo] = [args[3], args[4]];
      if (amount && memo) {
        this.application.addExpense(amount, memo);
      } else {
        console.log("You must provide an amount and memo.");
      }
    } else if (command === "search") {
      let term = args[3];
      if (term) {
        this.application.searchExpenses(term);
      } else {
        console.log("You must provide a search term.");
      }
    } else if (command === "delete") {
      let id = args[3];
      if (id) {
        this.application.deleteExpense(id);
      } else {
        console.log("You must provide an expense ID.");
      }
    } else if (command === "clear") {
      let rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      let questionText = "This will remove all expenses. Are you sure? (enter y to confirm)\n";

      rl.question(questionText, answer => {
        if (answer.toLowerCase().trim() === "y") {
          this.application.deleteAllExpenses();
        } 
        rl.close();
      });

    } else {
      this.displayHelp();
    }
  }
}

new CLI().run(PROCESS.argv);